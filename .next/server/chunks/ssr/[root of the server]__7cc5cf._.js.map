{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 36, "column": 0}, "map": {"version":3,"sources":["file:///home/gee/bread/3d/Skate-App-3d/src/prismicio.ts"],"sourcesContent":["import * as prismic from \"@prismicio/client\";\nimport * as prismicNext from \"@prismicio/next\";\nimport config from \"../slicemachine.config.json\";\n\n/**\n * The project's Prismic repository name.\n */\nexport const repositoryName =\n  process.env.NEXT_PUBLIC_PRISMIC_ENVIRONMENT || config.repositoryName;\n\n/**\n * A list of Route Resolver objects that define how a document's `url` field is resolved.\n *\n * {@link https://prismic.io/docs/route-resolver#route-resolver}\n */\n// TODO: Update the routes array to match your project's route structure.\nconst routes: prismic.ClientConfig[\"routes\"] = [\n  // Examples:\n  // {\n  // \ttype: \"homepage\",\n  // \tpath: \"/\",\n  // },\n  // {\n  // \ttype: \"page\",\n  // \tpath: \"/:uid\",\n  // },\n];\n\n/**\n * Creates a Prismic client for the project's repository. The client is used to\n * query content from the Prismic API.\n *\n * @param config - Configuration for the Prismic client.\n */\nexport const createClient = (config: prismicNext.CreateClientConfig = {}) => {\n  const client = prismic.createClient(repositoryName, {\n    routes,\n    fetchOptions:\n      process.env.NODE_ENV === \"production\"\n        ? { next: { tags: [\"prismic\"] }, cache: \"force-cache\" }\n        : { next: { revalidate: 5 } },\n    ...config,\n  });\n\n  prismicNext.enableAutoPreviews({\n    client,\n    previewData: config.previewData,\n    req: config.req,\n  });\n\n  return client;\n};\n"],"names":[],"mappings":";;;;AAEA;AAFA;AACA;;;;AAMO,MAAM,iBACX,QAAQ,GAAG,CAAC,+BAA+B,IAAI,8FAAA,CAAA,UAAM,CAAC,cAAc;AAEtE;;;;CAIC,GACD,yEAAyE;AACzE,MAAM,SAAyC,EAU9C;AAQM,MAAM,eAAe,CAAC,SAAyC,CAAC,CAAC;IACtE,MAAM,SAAS,uJAAQ,YAAY,CAAC,gBAAgB;QAClD;QACA,cACE,6EAEI;YAAE,MAAM;gBAAE,YAAY;YAAE;QAAE;QAChC,GAAG,MAAM;IACX;IAEA,qJAAY,kBAAkB,CAAC;QAC7B;QACA,aAAa,OAAO,WAAW;QAC/B,KAAK,OAAO,GAAG;IACjB;IAEA,OAAO;AACT"}},
    {"offset": {"line": 70, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///home/gee/bread/3d/Skate-App-3d/src/slices/index.ts"],"sourcesContent":["// Code generated by Slice Machine. DO NOT EDIT.\n\nimport dynamic from \"next/dynamic\";\n\nexport const components = {\n  hero: dynamic(() => import(\"./Hero\")),\n};\n"],"names":[],"mappings":"AAAA,gDAAgD;;;;AAEhD;;AAEO,MAAM,aAAa;IACxB,MAAM,CAAA,GAAA,+JAAA,CAAA,UAAO,AAAD,EAAE;;;;;;;AAChB"}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 97, "column": 0}, "map": {"version":3,"sources":["file:///home/gee/bread/3d/Skate-App-3d/src/app/page.tsx"],"sourcesContent":["import { Metadata } from \"next\";\nimport { isFilled, asImageSrc } from \"@prismicio/client\";\nimport { SliceZone } from \"@prismicio/react\";\n\nimport { createClient } from \"@/prismicio\";\nimport { components } from \"@/slices\";\n\nexport default async function Page() {\n  const client = createClient();\n  const page = await client.getSingle(\"homepage\");\n\n  return <SliceZone slices={page.data.slices} components={components} />;\n}\n\nexport async function generateMetadata(): Promise<Metadata> {\n  const client = createClient();\n  const page = await client.getSingle(\"homepage\");\n\n  return {\n    title: page.data.meta_title,\n    description: page.data.meta_description,\n    openGraph: {\n      title: isFilled.keyText(page.data.meta_title)\n        ? page.data.meta_title\n        : undefined,\n      description: isFilled.keyText(page.data.meta_description)\n        ? page.data.meta_description\n        : undefined,\n      images: isFilled.image(page.data.meta_image)\n        ? [asImageSrc(page.data.meta_image)]\n        : undefined,\n    },\n  };\n}"],"names":[],"mappings":";;;;;AAIA;AACA;AAHA;AADA;AAAA;;;;;;AAMe,eAAe;IAC5B,MAAM,SAAS,CAAA,GAAA,gHAAA,CAAA,eAAY,AAAD;IAC1B,MAAM,OAAO,MAAM,OAAO,SAAS,CAAC;IAEpC,qBAAO,8OAAC,yJAAA,CAAA,YAAS;QAAC,QAAQ,KAAK,IAAI,CAAC,MAAM;QAAE,YAAY,sHAAA,CAAA,aAAU;;;;;;AACpE;AAEO,eAAe;IACpB,MAAM,SAAS,CAAA,GAAA,gHAAA,CAAA,eAAY,AAAD;IAC1B,MAAM,OAAO,MAAM,OAAO,SAAS,CAAC;IAEpC,OAAO;QACL,OAAO,KAAK,IAAI,CAAC,UAAU;QAC3B,aAAa,KAAK,IAAI,CAAC,gBAAgB;QACvC,WAAW;YACT,OAAO,wMAAA,CAAA,WAAQ,CAAC,OAAO,CAAC,KAAK,IAAI,CAAC,UAAU,IACxC,KAAK,IAAI,CAAC,UAAU,GACpB;YACJ,aAAa,wMAAA,CAAA,WAAQ,CAAC,OAAO,CAAC,KAAK,IAAI,CAAC,gBAAgB,IACpD,KAAK,IAAI,CAAC,gBAAgB,GAC1B;YACJ,QAAQ,wMAAA,CAAA,WAAQ,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,UAAU,IACvC;gBAAC,CAAA,GAAA,sKAAA,CAAA,aAAU,AAAD,EAAE,KAAK,IAAI,CAAC,UAAU;aAAE,GAClC;QACN;IACF;AACF"}},
    {"offset": {"line": 139, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 150, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 150, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}